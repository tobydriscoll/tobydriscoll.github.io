{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Householder QR\n",
    "\n",
    "We will use Householder reflections to produce a QR factorization of the matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6, 4)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = rand(1.:9.,6,4)\n",
    "m,n = size(A)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our first step is to introduce zeros below the diagonal in column 1. Define the vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "z = A[:,1];"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Applying the Householder definitions gives us"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6×6 Array{Float64,2}:\n",
       " 0.295689   0.147844    0.221766    0.221766    0.591377   0.665299\n",
       " 0.147844   0.968966   -0.0465517  -0.0465517  -0.124138  -0.139655\n",
       " 0.221766  -0.0465517   0.930172   -0.0698275  -0.186207  -0.209483\n",
       " 0.221766  -0.0465517  -0.0698275   0.930172   -0.186207  -0.209483\n",
       " 0.591377  -0.124138   -0.186207   -0.186207    0.503449  -0.55862\n",
       " 0.665299  -0.139655   -0.209483   -0.209483   -0.55862    0.371552"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "using LinearAlgebra\n",
    "v = z - norm(z)*[1;zeros(m-1)]\n",
    "P = I - 2/(v'*v)*(v*v')   # reflector"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(Julia automatically fills in an identity of the correct size for the `I` above.) By design we can use the reflector to get the zero structure we seek:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6-element Array{Float64,1}:\n",
       " 13.527749258468681\n",
       "  4.440892098500626e-16\n",
       "  4.440892098500626e-16\n",
       "  4.440892098500626e-16\n",
       "  8.881784197001252e-16\n",
       "  1.7763568394002505e-15"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "P*z"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we let"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6×4 Array{Float64,2}:\n",
       " 13.5277        9.31419    12.1972    13.8234\n",
       "  6.38378e-16   0.674569    6.11896    4.14784\n",
       "  3.88578e-16   0.0118532   4.67844    2.22177\n",
       "  3.88578e-16   1.01185     0.678444   1.22177\n",
       "  7.77156e-16  -1.30172     0.475851  -0.408623\n",
       "  1.66533e-15   1.03556     3.03533   -0.334701"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = P*A"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are set to put zeros into column 2. We must not use row 1 in any way, lest it destroy the zeros we just introduced. To put it another way, we can repeat the process we just did on the smaller submatrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5×3 Array{Float64,2}:\n",
       "  0.674569   6.11896    4.14784\n",
       "  0.0118532  4.67844    2.22177\n",
       "  1.01185    0.678444   1.22177\n",
       " -1.30172    0.475851  -0.408623\n",
       "  1.03556    3.03533   -0.334701"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A[2:m,2:n]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "z = A[2:m,2];\n",
    "v = z - norm(z)*[1;zeros(m-2)];\n",
    "P = I - 2/(v'*v)*(v*v');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now apply the reflector to the submatrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6×4 Array{Float64,2}:\n",
       " 13.5277        9.31419      12.1972   13.8234\n",
       "  6.38378e-16   2.06056       3.58808   2.06056\n",
       "  3.88578e-16  -3.23413e-18   4.70009   2.23962\n",
       "  3.88578e-16  -1.52382e-16   2.52614   2.74561\n",
       "  7.77156e-16   3.71222e-16  -1.90116  -2.36901\n",
       "  1.66533e-15  -6.34236e-17   4.92632   1.22484"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A[2:m,2:n] = P*A[2:m,2:n]\n",
    "A"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need two more iterations of this process."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "for j = 3:n\n",
    "    z = A[j:m,j]\n",
    "    v = z - norm(z)*[1;zeros(m-j)]\n",
    "    P = I - 2/(v'*v)*(v*v')\n",
    "    A[j:m,j:n] = P*A[j:m,j:n]\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have now reduced the original  to an upper triangular matrix using four orthogonal Householder reflections:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6×4 Array{Float64,2}:\n",
       " 13.5277        9.31419      12.1972       13.8234\n",
       "  6.38378e-16   2.06056       3.58808       2.06056\n",
       "  3.88578e-16  -3.23413e-18   7.50701       3.72985\n",
       "  3.88578e-16  -1.52382e-16  -3.15527e-16   2.39894\n",
       "  7.77156e-16   3.71222e-16   3.5073e-16    2.88625e-16\n",
       "  1.66533e-15  -6.34236e-17  -3.68968e-16   3.84193e-17"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "R = A"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 1.4.1",
   "language": "julia",
   "name": "julia-1.4"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.4.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
