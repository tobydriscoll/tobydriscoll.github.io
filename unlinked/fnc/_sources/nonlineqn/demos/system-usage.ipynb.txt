{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Usage of `newtonsys`\n",
    "\n",
    "As before, the system is defined by its residual and Jacobian, but this time we implement them as a single function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "nlsystem (generic function with 1 method)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function nlsystem(x)\n",
    "    f = zeros(3)  \n",
    "    f[1] = exp(x[2]-x[1]) - 2;\n",
    "    f[2] = x[1]*x[2] + x[3];\n",
    "    f[3] = x[2]*x[3] + x[1]^2 - x[2];\n",
    "    \n",
    "    J = zeros(3,3)\n",
    "    J[1,:] = [-exp(x[2]-x[1]),exp(x[2]-x[1]), 0]\n",
    "    J[2,:] = [x[2], x[1], 1]\n",
    "    J[3,:] = [2*x[1], x[3]-1, x[2]]\n",
    "    \n",
    "    return f,J\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our initial guess is the origin. The output has one column per iteration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3Ã—7 Array{Float64,2}:\n",
       " 0.0  -1.0  -0.578586  -0.463139  -0.458027  -0.458033  -0.458033\n",
       " 0.0   0.0   0.157173   0.230904   0.235121   0.235114   0.235114\n",
       " 0.0   0.0   0.157173   0.115452   0.107713   0.10769    0.10769"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x1 = [0,0,0]\n",
    "\n",
    "using FundamentalsNumericalComputation\n",
    "x = FNC.newtonsys(nlsystem,x1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The last column contains the final Newton estimate. We'll compute the residual there in order to check the quality of the result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3-element Array{Float64,1}:\n",
       " 0.0\n",
       " 1.3877787807814457e-17\n",
       " 0.0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r = x[:,end]\n",
    "f,J = nlsystem(r)\n",
    "f"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's use the convergence to the first component of the root as a proxy for the convergence of the vectors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6-element Array{Float64,1}:\n",
       " -0.33910296506655396\n",
       " -0.26602738143693677\n",
       " -0.9188219290579982\n",
       " -2.2919758192847413\n",
       " -5.192931369910553\n",
       " -9.968541940700057"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "@. log( 10,abs(x[1,1:end-1]-r[1]) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The exponents approximately double, as is expected of quadratic convergence."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia (fast start)",
   "language": "julia",
   "name": "julia-fast"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.4.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
