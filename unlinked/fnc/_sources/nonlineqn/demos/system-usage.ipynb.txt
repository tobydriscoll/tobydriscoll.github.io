{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Usage of `newtonsys`\n",
    "\n",
    "As before, a system of nonlinear equations is defined by its residual and Jacobian."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "nljac (generic function with 1 method)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function nlfun(x)\n",
    "    f = zeros(3)  \n",
    "    f[1] = exp(x[2]-x[1]) - 2;\n",
    "    f[2] = x[1]*x[2] + x[3];\n",
    "    f[3] = x[2]*x[3] + x[1]^2 - x[2];\n",
    "    return f\n",
    "end\n",
    "   \n",
    "function nljac(x)\n",
    "    J = zeros(3,3)\n",
    "    J[1,:] = [-exp(x[2]-x[1]),exp(x[2]-x[1]), 0]\n",
    "    J[2,:] = [x[2], x[1], 1]\n",
    "    J[3,:] = [2*x[1], x[3]-1, x[2]]\n",
    "    return J\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our initial root estimate is the origin. The output is a vector of vector root estimates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7-element Array{Array{Float64,1},1}:\n",
       " [0.0, 0.0, 0.0]\n",
       " [-1.0, 0.0, 0.0]\n",
       " [-0.578586294114295, 0.1571725882285898, 0.15717258822858976]\n",
       " [-0.4631386148886986, 0.23090368503021674, 0.11545249687009654]\n",
       " [-0.4580268675321411, 0.23512071352763037, 0.10771316029325663]\n",
       " [-0.45803328074878114, 0.2351138998112444, 0.10768999092388234]\n",
       " [-0.45803328064126886, 0.23511389991867648, 0.10768999090411435]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x1 = [0,0,0]\n",
    "\n",
    "using FundamentalsNumericalComputation\n",
    "x = FNC.newtonsys(nlfun,nljac,x1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll compute the residual of the last result in order to check the quality."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3-element Array{Float64,1}:\n",
       " 0.0\n",
       " 1.3877787807814457e-17\n",
       " 0.0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r = x[end]\n",
    "nlfun(r)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's use the convergence to the first component of the root as a proxy for the convergence of the vectors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6-element Array{Float64,1}:\n",
       "  -0.6424646089199801\n",
       "  -0.5099879855618902\n",
       "  -1.8849058464450312\n",
       "  -4.585334658693529\n",
       " -10.597135921091917\n",
       " -22.59882803634857"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "using LinearAlgebra\n",
    "[ log(norm(x[k]-r)) for k in 1:length(x)-1 ]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The exponents approximately double, as is expected of quadratic convergence."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia faststart",
   "language": "julia",
   "name": "julia-fast"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.4.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
