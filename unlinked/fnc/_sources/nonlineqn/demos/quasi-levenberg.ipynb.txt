{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using `levenberg`\n",
    "\n",
    "To solve a nonlinear system, we need to code only the function defining the system (residual vector), and not its Jacobian."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "nlsystem (generic function with 1 method)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function nlsystem(x)\n",
    "    return [ \n",
    "        exp(x[2]-x[1]) - 2,\n",
    "        x[1]*x[2] + x[3],\n",
    "        x[2]*x[3] + x[1]^2 - x[2]\n",
    "        ]\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In all other respects usage is the same as for the `newtonsys` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3×12 Array{Float64,2}:\n",
       " 0.0  -0.0839695  -0.422051   -0.486107   …  -0.458033  -0.458033  -0.458033\n",
       " 0.0   0.0763359   0.219913    0.213897       0.235114   0.235114   0.235114\n",
       " 0.0   0.0         0.0129976   0.0977187      0.10769    0.10769    0.10769"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "using FundamentalsNumericalComputation\n",
    "\n",
    "x1 = [0,0,0]   \n",
    "x = FNC.levenberg(nlsystem,x1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It's always a good idea to check the accuracy of the root, by measuring the residual (backward error)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "backward_err = norm(nlsystem(r)) = 1.2708308198538738e-13\n"
     ]
    }
   ],
   "source": [
    "using LinearAlgebra\n",
    "r = x[:,end]\n",
    "@show backward_err = norm(nlsystem(r));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the convergence of the first component, we find a subquadratic convergence rate, just as with the secant method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11-element Array{Float64,1}:\n",
       "  -0.339102965066587\n",
       "  -0.4270543010723006\n",
       "  -1.4439084186692495\n",
       "  -1.5516983593341895\n",
       "  -2.7571176181745702\n",
       "  -2.620794767983644\n",
       "  -3.4402555412715268\n",
       "  -4.994683276673789\n",
       "  -7.344833652127618\n",
       "  -8.736590992194474\n",
       " -10.091330869104365"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "@. log( 10, abs(x[1,1:end-1]-r[1]) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia (fast start)",
   "language": "julia",
   "name": "julia-fast"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.4.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
