{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Convergence of the secant method\n",
    "\n",
    "We check the convergence of the secant method from the previous example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9-element Array{Float64,1}:\n",
       " 1.0\n",
       " 0.5\n",
       " 0.8103717749522766\n",
       " 0.8656319273409482\n",
       " 0.85217802207241\n",
       " 0.8526012320981393\n",
       " 0.8526055034192025\n",
       " 0.8526055020137209\n",
       " 0.8526055020137254"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f = x -> x*exp(x) - 2;\n",
    "\n",
    "using FundamentalsNumericalComputation\n",
    "x = FNC.secant(f,1,0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We don't know the exact root, so we use `nlsolve` to get a substitute."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1-element Array{Float64,1}:\n",
       " 0.8526055020137259"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "using NLsolve\n",
    "r = nlsolve(x->f(x[1]),[1.]).zero"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here is the sequence of errors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9-element Array{Float64,1}:\n",
       " -0.14739449798627413\n",
       "  0.35260550201372587\n",
       "  0.04223372706144923\n",
       " -0.013026425327222313\n",
       "  0.000427479941315867\n",
       "  4.269915586552209e-6\n",
       " -1.4054766239723904e-9\n",
       "  4.9960036108132044e-15\n",
       "  4.440892098500626e-16"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "err = @. r - x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It's not so easy to see the convergence rate by looking at these numbers. But we can check the ratios of the log of successive errors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8-element Array{Float64,1}:\n",
       " 0.544438628027792\n",
       " 3.0358017547194502\n",
       " 1.3716940021941613\n",
       " 1.7871469297605422\n",
       " 1.5937804750422417\n",
       " 1.6485786973526697\n",
       " 1.6155775318340528\n",
       " 1.0735000904878467"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logerr = @. log(abs(err))\n",
    "ratios = @. logerr[2:end] / logerr[1:end-1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It seems to be heading toward a constant ratio of about 1.6 before it bumps up against machine precision."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia (fast start)",
   "language": "julia",
   "name": "julia-fast"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.4.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
